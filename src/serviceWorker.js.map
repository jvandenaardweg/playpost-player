{"version":3,"file":"serviceWorker.js","sourceRoot":"./src-server/","sources":["serviceWorker.ts"],"names":[],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"]}