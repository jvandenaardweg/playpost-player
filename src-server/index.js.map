{"version":3,"file":"index.js","sourceRoot":"./src-server/","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["import express, { Request, Response } from 'express'\nimport path from 'path';\nimport ejs from 'ejs';\nimport nodeFetch from 'node-fetch';\nimport { Api } from '../src/typings/playpost-api';\n\nconst app = express();\n\n// Set custom ejs delimiter\n// Use: <$- article $>\nejs.delimiter = '$';\n\napp.set('view engine', 'ejs');\napp.set('views', path.join(__dirname, './'))\n\napp.use(express.static(path.join(__dirname, '../build')));\n\napp.get('/ping', (req: Request, res: Response) => {\n  return res.send('pong');\n});\n\napp.get('/articles/:articleId/audiofiles/:audiofileId', async (req: Request, res: Response) => {\n  const { articleId, audiofileId } = req.params;\n\n  if (!articleId) {\n    const errorPageRendered = await ejs.renderFile(__dirname + '/pages/error.ejs', {\n      title: 'Oops!',\n      description: 'Please given an article ID.'\n    })\n\n    return res.status(400).send(errorPageRendered);\n  }\n\n  if (!audiofileId) {\n    const errorPageRendered = await ejs.renderFile(__dirname + '/pages/error.ejs', {\n      title: 'Oops!',\n      description: 'Please given an audiofile ID for the article.'\n    })\n\n    return res.status(400).send(errorPageRendered);\n  }\n\n  try {\n    const response = await nodeFetch(`http://localhost:3000/v1/articles/${articleId}`, {\n      method: 'get',\n      headers: {\n        'X-Api-Key': '6892e59af722a2afa7147b348ba71100e56351bf3689cebc155c22db5b8c1d70',\n        'X-Api-Secret': 'f793d030c8062b5e1342ff9fcad0fc8177a966e61c809b02f2f207a473eeaf9a'\n      }\n    })\n\n    if (!response.ok) {\n      const json = await response.json()\n      throw new Error(json.message ? json.message : 'Did not got ok from api')\n    }\n\n    const article: Api.Article = await response.json()\n\n    // Find the audiofile using the audiofileId from the url param\n    const audiofile = article.audiofiles.find(audiofile => audiofile.id === audiofileId);\n\n    if (!audiofile) {\n      const errorPageRendered = await ejs.renderFile(__dirname + '/pages/error.ejs', {\n        title: 'Oops!',\n        description: 'Could not find the audiofile in the article data.'\n      })\n      return res.status(404).send(errorPageRendered);\n    }\n\n    // Render the embed page with the article API data inside, so React can use that data to render the player\n    const embedPageRendered = await ejs.renderFile(__dirname + '/../build/index.ejs', {\n      title: article.title,\n      article: JSON.stringify(article),\n      audiofile: JSON.stringify(audiofile),\n    })\n\n    // Send the HTML page to the user\n    return res.send(embedPageRendered)\n  } catch (err) {\n    const isApiUnavailable = err && err.code === 'ECONNREFUSED'\n    const errorMessage = err && err.message\n\n    console.log(err)\n\n    const title = isApiUnavailable ? 'Playpost API not available.' : 'Oops!'\n    const description = errorMessage ? errorMessage : isApiUnavailable ? 'Could not connect to the Playpost API to get the article data.' : 'An unknown error happened. Please reload the page.'\n\n    const errorPageRendered = await ejs.renderFile(__dirname + '/pages/error.ejs', {\n      title,\n      description\n    })\n\n    if (isApiUnavailable) {\n      return res.status(503).send(errorPageRendered);\n    }\n\n    return res.status(500).send(errorPageRendered);\n  }\n\n});\n\nconst port = process.env.PORT || 8080;\n\nconsole.log('Server init on port:', port);\n\napp.listen(port);\n"]}